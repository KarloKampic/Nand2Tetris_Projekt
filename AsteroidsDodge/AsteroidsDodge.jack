class AsteroidsDodge
{
   field boolean isRunning;

   field int enemiesCount, enemySpawnRate;
   field int score, spaceSpeed, enemiesSpeed, enemiesAcceleration;

   field Player player;
   field Array enemies;
   field Array enemySpawnYCoords;
   field Space space;           
   field Random random;     
   field Interface interface;
   

   constructor AsteroidsDodge new()
   {
      var Enemy currentEnemy;
      var int i;

      // inicijalizacija interface
      let interface = Interface.new();
      
      // Inicijalizacija playera
      let player = Player.new(26, 96);

      // inicijalizacija neprijatelja
      let enemiesCount = 16;
      let enemiesSpeed = 10;
      let enemies = Array.new(enemiesCount);
      let i = 0;
      while (i < enemiesCount)
      {
         let enemies[i] = Enemy.new(16, 16);
         let currentEnemy = enemies[i];
         do currentEnemy.die();

         let i = i + 1;
      }

      // Incijalizacija puta
      let space = Space.new();
      let spaceSpeed = 10;

      // Inicijalizacija random generatora
      let enemySpawnYCoords = Array.new(4);
      let enemySpawnYCoords[0] = 16;
      let enemySpawnYCoords[1] = 80;
      let enemySpawnYCoords[2] = 144;
      let enemySpawnYCoords[3] = 208;

      // Inicijalizacija score
      let score = 0;

      return this;
   }

   /* PokreÄ‡e igticu, hendla inpute i pomjera shuttle */
   method void run()
   {
      var int randomSeed;
      var char key;

      let randomSeed = handleStartGame();
      let random = Random.new(randomSeed);

      let enemiesAcceleration = 1;
      let enemySpawnRate = 9;

      do handleGameProcess();

      do Screen.clearScreen();
      do interface.drawFinalWindow(score);
      do handleEndGame();

      return;
   }

   method void handleGameProcess()
   {
      var char key;
      var int tick, frame, deadAsteroidsCount;

      let isRunning = true;
      let tick = 0;
      let frame = 0;

      while (isRunning)
      {
         let key = Keyboard.keyPressed();

         if (tick = 2500)
         {
            if (key = 140) { let isRunning = false; }  // esc key
            if (key = 131) { do player.move(0, -15); }  // up arrow
            if (key = 133) { do player.move(0, 15); }  // down arrow   

            do moveEnemies();
            do space.moveMarking(spaceSpeed);

            let deadAsteroidsCount = handleAsteroidsDeaths();
            let score = score + deadAsteroidsCount;
            do handleSpeedIncreasing(deadAsteroidsCount);

            do drawFrame();
            
            let tick = 0;
            let frame = frame + 1;
         }

         if (frame = enemySpawnRate)
         {
            do trySpawnEnemy();

            let frame = 0;
         }

         let tick = tick + 1;
      }

      return;
   }

   method void handleSpeedIncreasing(int deadAsteroidsCount)
   {
      if (deadAsteroidsCount > 0)
      {
         if ((Utils.mod(score, 5) = 0) & (score > 0))
         {
            let spaceSpeed = spaceSpeed + enemiesAcceleration;
            let enemiesSpeed = enemiesSpeed + enemiesAcceleration;
         }
      }

      return;
   }

   method int handleStartGame()
   {
      var char key;

      let key = Keyboard.keyPressed();
      do interface.drawWelcomeWindow();

      return handleGameStart(key);
   }

   method int handleGameStart(char key)
   {
      var int randomSeed;

      while (~(key = 128)) // enter key
      {
         let key = Keyboard.keyPressed();
         let randomSeed = Utils.mod(randomSeed + 1, 32767);
         
      }

      return randomSeed;
   }

   method void handleEndGame()
   {
      while (~(Keyboard.keyPressed() = 128)) { } // enter key

      return;
   }

   method void drawFrame()
   {
      do Screen.clearScreen();
      do space.drawMarking();
      do player.draw();
      do drawEnemies();
      do interface.drawPlayerScore(score);

      return;
   }

   method int handleAsteroidsDeaths()
   {
      var Enemy currentEnemy;
      var int i, deadAsteroidsCount;

      let i = 0;
      while (i < enemiesCount)
      {
         let currentEnemy = enemies[i];

         if (currentEnemy.isAlive())
         {
            if (~(currentEnemy.onScreen()))
            {
               let deadAsteroidsCount = deadAsteroidsCount + 1;
               do currentEnemy.die();
            }
            
            if (conflictHappened(currentEnemy.GetX(), currentEnemy.GetY(), player.GetX(), player.GetY()))
            {
               let isRunning = false;
            }
         }

         let i = i + 1;
      }

      return deadAsteroidsCount;
   }

   method void moveEnemies()
   {
      var Enemy currentEnemy;
      var int i;

      let i = 0;
      while (i < enemiesCount)
      {
         let currentEnemy = enemies[i];

         if (currentEnemy.isAlive())
         {
            do currentEnemy.move(enemiesSpeed, 0);
         }

         let i = i + 1;
      }

      return;
   }

   method void drawEnemies()
   {
      var Enemy currentEnemy;
      var int i;

      let i = 0;
      while (i < enemiesCount)
      {
         let currentEnemy = enemies[i];

         if (currentEnemy.isAlive())
         {
            do currentEnemy.draw();
         }
   
         let i = i + 1;
      }

      return;
   }

   method void trySpawnEnemy()
   {
      var Enemy newEnemy, currentEnemy;
      var int case, i;

      let case = random.next(5);
      if (case < 4)
      {
         let i = 0;
         let currentEnemy = enemies[i];
         while ((i < (enemiesCount-1)) & (currentEnemy.isAlive()))
         {
            let i = i + 1;
            let currentEnemy = enemies[i];
         }

         if (~(currentEnemy.isAlive()))
         {
            do currentEnemy.reborn(0, enemySpawnYCoords[case]);
         }
      }

      return;
   }

   method boolean conflictHappened(int xEnemy, int yEnemy, int xPlayer, int yPlayer)
   {
      var int leftEnemyX, topLeftEnemyY, bottomLeftEnemyY;
      var int rightPlayerX, topRightPlayerY, bottomRightPlayerY;

      var boolean isConflictFromBelow, isConflictFromAbove;

      let leftEnemyX = xEnemy + 47;
      let topLeftEnemyY = yEnemy;
      let bottomLeftEnemyY = yEnemy + 31;

      let rightPlayerX = xPlayer;
      let topRightPlayerY = yPlayer;
      let bottomRightPlayerY = yPlayer + 31;

      let isConflictFromBelow = (~(topRightPlayerY > bottomLeftEnemyY)) & (~(topRightPlayerY < topLeftEnemyY)) & (~(rightPlayerX > leftEnemyX));
      let isConflictFromAbove = (~(bottomRightPlayerY > bottomLeftEnemyY)) & (~(bottomRightPlayerY < topLeftEnemyY)) & (~(rightPlayerX > leftEnemyX));

      return isConflictFromBelow | isConflictFromAbove;
   }
   
   method void dispose()
   {
      do player.dispose();
      do Memory.deAlloc(enemies);
      do Memory.deAlloc(enemySpawnYCoords);
      do space.dispose();
      do random.dispose();
      do interface.dispose();
      do Memory.deAlloc(this);
      
      return;
   }
}



